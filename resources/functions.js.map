{"version":3,"file":"functions.js","mappings":"yBAkNAA,gBAAgBC,UAAU,OAzM1B,SAAoBC,EAAeC,GACjC,OAAOD,EAAQC,CACjB,IAwMAH,gBAAgBC,UAAU,QA/L1B,SAAqBC,EAAeC,GAClC,OAAOD,EAAQC,CACjB,IA8LAH,gBAAgBC,UAAU,SAvL1B,SAAsBG,GACpB,IAAMC,EAAQC,aAAY,WACxB,IAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EACvB,GAAG,KAEHH,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IA+KAL,gBAAgBC,UAAU,aA/J1B,SAA0BY,EAAqBT,GAC7C,IAAIU,EAAS,EACPT,EAAQC,aAAY,WACxBQ,GAAUD,EACVT,EAAWM,UAAUI,EACvB,GAAG,KAEHV,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAsJAL,gBAAgBC,UAAU,OA9I1B,SAA2Bc,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,IA2IAf,gBAAgBC,UAAU,UApI1B,WACE,MAAO,GACT,IAmIAD,gBAAgBC,UAAU,SAzH1B,SAAsBC,EAAeC,EAAiBe,GAInD,OAHc,OAAVA,IACFA,EAAQ,GAEHhB,EAAQC,EAASe,CAC3B,IAqHAlB,gBAAgBC,UAAU,SA7G1B,SAAekB,GACb,IAAIC,EAAgB,EAUpB,OARAD,EAASE,SAAQ,SAAAC,GACfA,EAAMD,SAAQ,SAAAE,GACZA,EAAIF,SAAQ,SAAAG,GACVJ,GAASI,CACX,GACF,GACF,IAEOJ,CACT,IAkGApB,gBAAgBC,UAAU,iBA3F1B,SAAuBwB,GAGrB,IAFA,IAAIC,EAAUD,EAAO,GAAG,GACtBE,EAAgBF,EAAO,GAAG,GACnBG,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IACjC,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAOG,GAAGC,OAAQC,IAChCL,EAAOG,GAAGE,IAAMJ,GAClBC,EAAgBD,EAChBA,EAAUD,EAAOG,GAAGE,IACXL,EAAOG,GAAGE,IAAMH,IACzBA,EAAgBF,EAAOG,GAAGE,IAIhC,OAAOH,CACT,G","sources":["webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add2(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second.\n * @customfunction\n * @param invocation Custom function handler\n */\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time.\n * @returns String with the current time formatted for the current locale.\n */\nexport function currentTime(): string {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(incrementBy: number, invocation: CustomFunctions.StreamingInvocation<number>): void {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\n/**\n * Set 2 to a cell.\n * @customfunction setTwo\n * @returns String 2 to write.\n */\nexport function setTwo(): string {\n  return \"2\";\n}\n\n/**\n * Calculates the sum of the specified numbers\n * @customfunction\n * @param first First number.\n * @param [second] Second number.\n * @param [third] Third number to add. If omitted, third = 0.\n * @returns The sum of the numbers.\n */\nexport function addOp(first: number, second?: number, third?: number): number {\n   if (third === null) {\n     third = 0;\n   }\n   return first + second + third;\n}\n\n/**\n* The sum of all of the numbers.\n* @customfunction\n* @param operands A number (such as 1 or 3.1415), a cell address (such as A1 or $E$11), or a range of cell addresses (such as B3:F12)\n*/\n\nfunction addRe(operands: number[][][]): number {\n  let total: number = 0;\n\n  operands.forEach(range => {\n    range.forEach(row => {\n      row.forEach(num => {\n        total += num;\n      });\n    });\n  });\n\n  return total;\n}\n\n/**\n * Returns the second highest value in a matrixed range of values.\n * @customfunction\n * @param {number[][]} values Multiple ranges of values.\n */\nfunction secondHighest(values) {\n  let highest = values[0][0],\n    secondHighest = values[0][0];\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < values[i].length; j++) {\n      if (values[i][j] >= highest) {\n        secondHighest = highest;\n        highest = values[i][j];\n      } else if (values[i][j] >= secondHighest) {\n        secondHighest = values[i][j];\n      }\n    }\n  }\n  return secondHighest;\n}\n\n// /**\n// * The sum of all of the numbers.\n// * @customfunction\n// * @param val1 A number (such as 1 or 3.1415), a cell address (such as A1 or $E$11), or a range of cell addresses (such as B3:F12)\n// * @param val2 A number (such as 1 or 3.1415), a cell address (such as A1 or $E$11), or a range of cell addresses (such as B3:F12)\n// */\n\n// function RepeatingTest1(val1: number[], val2: number[][][]): number {\n//   let total: number = 0;\n\n//   val1.forEach(num => { \n//     total += num;\n//   })\n\n//   val2.forEach(range => {\n//     range.forEach(row => {\n//       row.forEach(num => {\n//         total += num;\n//       });\n//     });\n//   });\n\n//   return total;\n// }\n\n// /**\n// * The sum of all of the numbers.\n// * @customfunction\n// * @param val1 A number (such as 1 or 3.1415), a cell address (such as A1 or $E$11), or a range of cell addresses (such as B3:F12)\n// * @param val2 A number (such as 1 or 3.1415), a cell address (such as A1 or $E$11), or a range of cell addresses (such as B3:F12)\n// */\n\n// function RepeatingTest2(val1: number[], val2: number[][]): number {\n//   let total: number = 0;\n\n//   val1.forEach(num => { \n//     total += num;\n//   })\n\n//   val2.forEach(range => {\n//     range.forEach(row => {\n//         total += row;\n//     });\n//   });\n\n//   return total;\n// }\n\n// /**\n// Clears a stored token from OfficeRuntime.storage\n// @customfunction clearTokenPromise clearTokenPromise\n// @description Clears value from Office.storage.\n// @returns {string} String containing the result.\n// */\n// function clearTokenPromise() {\n// return Promise.resolve(\"Hello\");\n// }\n\n// /**\n// Clears a stored token from OfficeRuntime.storage\n// @customfunction clearTokenAsync clearTokenAsync\n// @description Clears value from Office.storage.\n// @returns {string} String containing the result.\n// */\n// async function clearTokenAsync() {\n// return \"Hello\";\n// }\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"ADD2\", add2);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"SETTWO\", setTwo);\nCustomFunctions.associate(\"ADDOP\", addOp);\nCustomFunctions.associate(\"ADDRE\", addRe);\nCustomFunctions.associate(\"SECONDHIGHEST\", secondHighest);"],"names":["CustomFunctions","associate","first","second","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","result","message","console","log","third","operands","total","forEach","range","row","num","values","highest","secondHighest","i","length","j"],"sourceRoot":""}