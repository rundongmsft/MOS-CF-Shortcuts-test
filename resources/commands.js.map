{"version":3,"file":"commands.js","mappings":"67CAcA,SAAeA,EAAaC,G,gGAExB,O,sBAAA,GAAMC,OAAOC,MAAMC,kB,cAAnBC,EAAAA,O,+BAEAC,QAAQC,MAAMC,G,oBAEhBP,EAAMQ,Y,WAGR,SAAeC,EAAaT,G,gGAExB,O,sBAAA,GAAMC,OAAOC,MAAMQ,Q,cAAnBN,EAAAA,O,+BAEAC,QAAQC,MAAMK,G,oBAEhBX,EAAMQ,Y,WAtBRP,OAAOW,SAAQ,WAEbX,OAAOY,QAAQC,UAAU,eAAgBf,GAEzCE,OAAOY,QAAQC,UAAU,eAAgBL,EAC3C,KAwCyB,oBAATM,KACVA,KACkB,oBAAXC,OACPA,YACkB,IAAXC,EAAAA,EACPA,EAAAA,OACAC,GAMJC,OA5BF,SAAgBnB,GACd,IAAMoB,EAA6C,CACjDC,KAAMpB,OAAOqB,aAAaC,4BAA4BC,qBACtDJ,QAAS,oBACTK,KAAM,aACNC,YAAY,GAIdzB,OAAO0B,QAAQC,QAAQC,KAAKC,qBAAqBC,aAAa,SAAUX,GAGxEpB,EAAMQ,WACR,C,GChDIwB,EAAsB,CAAC,ECD3BA,EAAoBC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAGhB,CAFE,MAAOC,GACR,GAAsB,iBAAXrB,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCIxBsB,EAAoB,OAAO,EADD,CAAC,EACwBN,E","sources":["webpack://excel-custom-functions/./src/commands/commands.ts","webpack://excel-custom-functions/webpack/bootstrap","webpack://excel-custom-functions/webpack/runtime/global","webpack://excel-custom-functions/webpack/startup"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global global, Office, self, window */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called\n  Office.actions.associate(\"SHOWTASKPANE\", showTaskpane);\n\n  Office.actions.associate(\"HIDETASKPANE\", hideTaskpane);\n});\n\nasync function showTaskpane(event) {\n  try {\n    await Office.addin.showAsTaskpane();\n  } catch (error) {\n    console.error(error);\n  }\n  event.completed();\n}\n\nasync function hideTaskpane(event) {\n  try {\n    await Office.addin.hide();\n  } catch (error) {\n    console.error(error);\n  }\n  event.completed();\n}\n\n/**\n * Shows a notification when the add-in command is executed.\n * @param event\n */\nfunction action(event: Office.AddinCommands.Event) {\n  const message: Office.NotificationMessageDetails = {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: \"Performed action.\",\n    icon: \"Icon.80x80\",\n    persistent: true,\n  };\n\n  // Show a notification message\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\n\n  // Be sure to indicate when the add-in command function is complete\n  event.completed();\n}\n\nfunction getGlobal() {\n  return typeof self !== \"undefined\"\n    ? self\n    : typeof window !== \"undefined\"\n    ? window\n    : typeof global !== \"undefined\"\n    ? global\n    : undefined;\n}\n\nconst g = getGlobal() as any;\n\n// The add-in command functions need to be available in global scope\ng.action = action;\n","// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[93786](0, __webpack_exports__, __webpack_require__);\n"],"names":["showTaskpane","event","Office","addin","showAsTaskpane","_a","console","error","error_1","completed","hideTaskpane","hide","error_2","onReady","actions","associate","self","window","global","undefined","action","message","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","context","mailbox","item","notificationMessages","replaceAsync","__webpack_require__","g","globalThis","this","Function","e","__webpack_modules__"],"sourceRoot":""}